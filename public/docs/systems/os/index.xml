<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating Systems on Hoyto ...</title>
    <link>http://localhost:1313/docs/systems/os/</link>
    <description>Recent content in Operating Systems on Hoyto ...</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/docs/systems/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/docs/systems/os/booting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/systems/os/booting/</guid>
      <description>&lt;h2 id=&#34;how-do-computers-boot-up&#34;&gt;&#xA;  How do computers boot up?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-do-computers-boot-up&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When we power up a computer, how does it know where to find an operating system? How does a computer identify that a particular program or executable file is an operating system and decide it will have the privilege to control the system? How does it know how to boot an entire operating system which may consist of more than a single executable file? How does an operating system take control of the system?&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU</title>
      <link>http://localhost:1313/docs/systems/os/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/systems/os/cpu/</guid>
      <description>&lt;h1 id=&#34;cpu&#34;&gt;&#xA;  CPU&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xA;  How does the OS send instructions to CPU? &lt;br&gt;&#xA;How does the OS take control of the CPU? &lt;br&gt;&#xA;Does CPU have it&amp;rsquo;s own OS internally? &lt;br&gt;&#xA;Does CPU recognize OS process or thread?&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;does-cpu-recognize-os-process-or-thread&#34;&gt;&#xA;  Does CPU recognize OS process or thread?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#does-cpu-recognize-os-process-or-thread&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Software process and threads are abstractions introduced by the OS. CPU may or may not recognize processes and software threads.&#xA;For example, Arm provides registers to store processor and thread IDs for OS management purpose.&#xA;In contrast, CPUs can have hardware threads (e.g., hart in CPUs based on RISC-V).&#xA;Hardware threads can be thought of as logical CPU cores.&#xA;The question is, how does OS implement and manage processes and software threads if CPU does not recognize these abstractions?&lt;/p&gt;</description>
    </item>
    <item>
      <title>I/O Path</title>
      <link>http://localhost:1313/docs/systems/os/io_path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/systems/os/io_path/</guid>
      <description>&lt;h1 id=&#34;how-are-data-accessed-in-computer-systems&#34;&gt;&#xA;  How are data accessed in computer systems?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-are-data-accessed-in-computer-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;linux-storage-stack-diagram&#34;&gt;&#xA;  Linux Storage Stack Diagram&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux-storage-stack-diagram&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/3/30/IO_stack_of_the_Linux_kernel.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/3/30/IO_stack_of_the_Linux_kernel.svg&#34; target=&#34;_blank&#34; &gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;direct-access-dax-io-path&#34;&gt;&#xA;  Direct Access (DAX) I/O Path&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#direct-access-dax-io-path&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pmem.io/glossary/programming-model/access_slide.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://pmem.io/glossary/&#34; target=&#34;_blank&#34; &gt;Pmem.io&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.storagereview.com/wp-content/uploads/2019/04/StorageReview-Intel-Optane-DC-PMEM-Storage-over-App-Direct.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.storagereview.com/news/intel-optane-dc-persistent-memory-module-pmm&#34; target=&#34;_blank&#34; &gt;StorageReview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;tiered-memory-io-path&#34;&gt;&#xA;  Tiered-memory I/O Path&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tiered-memory-io-path&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.storagereview.com/wp-content/uploads/2019/04/StorageReview-Optane-DC-PMEM-Memory-Mode-transaction-flow.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.storagereview.com/news/intel-optane-dc-persistent-memory-module-pmm&#34; target=&#34;_blank&#34; &gt;StorageReview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cxl-io-path&#34;&gt;&#xA;  CXL I/O Path&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cxl-io-path&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dl.acm.org/cms/10.1145/3669900/asset/22dee72a-97e0-457e-9abd-6a183717455d/assets/images/medium/csur-2023-0370-f01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3669900&#34; target=&#34;_blank&#34; &gt;ACM&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/semiengineering.com/wp-content/uploads/Fig01_CXL_Consortium_subprotocols.png?w=939&amp;amp;ssl=1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://semiengineering.com/cxl-the-future-of-memory-interconnect/&#34; target=&#34;_blank&#34; &gt;Semiconductor Engineering&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://venturebeat.com/wp-content/uploads/2020/08/cxl-stack.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Source: &lt;a href=&#34;https://b373eaf2-67af-4a29-b28c-3aae9e644f30.filesusr.com/ugd/0c1418_954145d3f3204e3aad3b8aaadb64b4ef.pptx?dn=CXL%20Coherency%20Webinar%20Master%20Deck_v12.pp&#34; target=&#34;_blank&#34; &gt;CXL Consortium&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-value-ssd-io-path&#34;&gt;&#xA;  Key-Value SSD I/O Path&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-value-ssd-io-path&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dt5vp8kor0orz.cloudfront.net/e843073b453375c2a393f700982e7482e56d70cc/6-Figure3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
